# -*- coding: utf-8 -*-
"""Graphs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Fk-8kr3qV7a1UDgGPWe5TEH08q0QZT-
"""

# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import roc_curve, roc_auc_score

# Load dataset
df = pd.read_csv("ipl_matches.csv")

# Preprocess the data
def parse_score(score):
    try:
        runs, wickets = score.split('/')
        return int(runs), int(wickets)
    except:
        return np.nan, np.nan

df = df[df['result'].notna() & (df['result'] != 'No result')].copy()
df[['1st_runs', '1st_wickets']] = df['1st_inning_score'].apply(parse_score).apply(pd.Series)
df[['2nd_runs', '2nd_wickets']] = df['2nd_inning_score'].apply(parse_score).apply(pd.Series)

df['first_batting_team'] = np.where(df['decision'] == 'BAT FIRST', df['toss_won'],
                                    np.where(df['toss_won'] == df['home_team'], df['away_team'], df['home_team']))
df['second_batting_team'] = np.where(df['first_batting_team'] == df['home_team'], df['away_team'], df['home_team'])

df['first_innings_runs'] = np.where(df['first_batting_team'] == df['home_team'], df['home_runs'], df['away_runs'])
df['second_innings_runs'] = np.where(df['second_batting_team'] == df['home_team'], df['home_runs'], df['away_runs'])
df['second_innings_wickets'] = np.where(df['second_batting_team'] == df['home_team'], df['home_wickets'], df['away_wickets'])
df['second_innings_overs'] = np.where(df['second_batting_team'] == df['home_team'], df['home_overs'], df['away_overs'])

df['target'] = df['first_innings_runs'] + 1
df['runs_left'] = df['target'] - df['second_innings_runs']
df['wickets_left'] = 10 - df['second_innings_wickets']
df['overs_left'] = 20 - df['second_innings_overs']
df['required_run_rate'] = df['runs_left'] / df['overs_left'].replace(0, np.inf)
df['required_run_rate'] = df['required_run_rate'].replace([np.inf, -np.inf], 0)
df['venue_advantage'] = (df['second_batting_team'] == df['home_team']).astype(int)
df['win'] = (df['winner'] == df['second_batting_team']).astype(int)

# Select features and target
features = ['runs_left', 'wickets_left', 'overs_left', 'required_run_rate', 'venue_advantage']
target = 'win'

# Drop missing values
data = df[features + [target]].dropna()
X = data[features]
y = data[target]

# Train the logistic regression model
model = LogisticRegression(max_iter=1000)
model.fit(X, y)

# Predict probabilities
y_pred_proba = model.predict_proba(X)[:, 1]

# Calculate ROC curve and AUC
fpr, tpr, thresholds = roc_curve(y, y_pred_proba)
auc_score = roc_auc_score(y, y_pred_proba)

# Plot ROC curve
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='blue', label=f"ROC Curve (AUC = {auc_score:.2f})")
plt.plot([0, 1], [0, 1], linestyle='--', color='gray', label="Random Classifier")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve - IPL Win Predictor")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

# Get feature importance from logistic regression coefficients
feature_names = X.columns
importance = model.coef_[0]  # model.coef_ is a 2D array

# Create a DataFrame for easier plotting
feat_imp_df = pd.DataFrame({
    'Feature': feature_names,
    'Importance': importance
}).sort_values(by='Importance', key=abs, ascending=False)

# Plot
plt.figure(figsize=(8, 5))
sns.barplot(data=feat_imp_df, x='Importance', y='Feature', palette='viridis')
plt.title("Feature Importance - Logistic Regression")
plt.xlabel("Coefficient Value")
plt.ylabel("Feature")
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()